generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id                     String   @id @default(uuid())
  password               String
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  resetPasswordToken     String?  @map("reset_password_token")
  verificationEmailtoken String?  @map("verification_email_token")
  user                   User?

  @@map("auth")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  roleId        String    @map("role_id")
  authId        String    @unique @map("auth_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  emailVerified Boolean   @default(false) @map("email_verified")
  business      Business?
  student       Student?
  auth          Auth      @relation(fields: [authId], references: [id])
  roles         Role      @relation(fields: [roleId], references: [id])

  @@index([email], map: "email_index")
  @@map("users")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]

  @@map("roles")
}

model  Student {
  id                String             @id @default(uuid())
  faculty           String?
  ira               String?
  description       String?
  shortPresentation String?            @map("short_presentation")
  imageUrl          String?            @map("image_url")
  userId            String             @unique @map("user_id")

  studentBookmarks  StudentBookmarks[]
  certifications    Certification[]
  projects          Project[]
  studentForms      StudenForm[]
  forums            Forum[]
  postulations      Postulation[]
  user              User               @relation(fields: [userId], references: [id])
  contracts         Contract?
  curriculums       Curriculums?

  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  @@map("students")
}

model  StudentBookmarks {
  id            String      @id @default(uuid())
  studentId     String      @map("student_id")
  publicationId String      @map("publication_id")

  publication   Publication @relation(fields: [publicationId], references: [id])
  student       Student     @relation(fields: [studentId], references: [id])

  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([studentId, publicationId])
  @@map("student_bookmarks")
}

model Business {
  id                String            @id @default(uuid())
  name              String
  code              String
  hasCovenant       Boolean           @default(false) @map("has_covenant")
  userId            String            @unique @map("user_id")
  city              String?
  description       String?
  phone             String?
  province          String?
  shortPresentation String?           @map("short_presentation")
  imageUrl          String?           @map("image_url")

  businessCovenants BusinessCovenant?
  user              User              @relation(fields: [userId], references: [id])
  contracts         Contract?
  forums            Forum[]
  publications      Publication[]

  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  @@map("businesses")
}

model Covenant {
  id                String             @id @default(uuid())
  name              String?
  description       String?
  type              String             @unique

  businessCovenants BusinessCovenant[]

  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  @@map("covenants")
}

model BusinessCovenant {
  id         String   @id @default(uuid())
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")
  businessId String   @unique @map("business_id")
  covenantId String   @map("covenant_id")

  business   Business @relation(fields: [businessId], references: [id])
  covenant   Covenant @relation(fields: [covenantId], references: [id])

  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("business_covenants")
}

model Contract {
  id           String   @id @default(uuid())
  startDate    DateTime @map("start_date")
  endDate      DateTime @map("end_date")
  practiceType String   @map("practice_type")
  remuneration Decimal
  businessId   String   @unique @map("business_id")
  studentId    String   @unique @map("student_id")

  business     Business @relation(fields: [businessId], references: [id])
  student      Student  @relation(fields: [studentId], references: [id])

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("contracts")
}

model Form {
  id           String       @id @default(uuid())
  name         String?
  description  String?
  code         String       @unique

  studentForms StudenForm[]

  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@map("forms")
}

model  StudenForm {
  id            String        @id @default(uuid())
  url           String        @unique
  status        String
  startDate     DateTime      @map("start_date")
  approvalDate  DateTime?     @map("approval_date")
  pendingDate   DateTime?     @map("pending_date")
  repprovalDate DateTime?     @map("repproval_date")
  studentId     String        @map("student_id")
  formId        String        @map("form_id")

  formContents  FormContent[]
  form          Form          @relation(fields: [formId], references: [id])
  student       Student       @relation(fields: [studentId], references: [id])

  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map("student_forms")
}

model Project {
  id            String         @id @default(uuid())
  name          String
  description   String?
  url           String
  studentId     String         @map("student_id")

  projectSkills ProjectSkill[]
  student       Student        @relation(fields: [studentId], references: [id])

  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@unique([name, studentId])
  @@map("projects")
}

model Skill {
  id                String             @id @default(uuid())
  name              String             @unique
  description       String?

  projectSkills     ProjectSkill[]
  publicationSkills PublicationSkill[]

  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  @@map("skills")
}

model ProjectSkill {
  id        String   @id @default(uuid())
  projectId String   @map("project_id")
  skillId   String   @map("skill_id")

  project   Project  @relation(fields: [projectId], references: [id])
  skill     Skill    @relation(fields: [skillId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([projectId, skillId])
  @@map("project_skills")
}

model Certification {
  id              String   @id @default(uuid())
  name            String
  description     String?
  emissionDate    DateTime @map("emission_date")
  url             String
  issuingBusiness String   @map("issuing_business")
  studentId       String   @map("student_id")

  student         Student  @relation(fields: [studentId], references: [id])

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([name, studentId])
  @@map("certifications")
}

model Curriculums {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  url         String
  studentId   String   @unique @map("student_id")

  student     Student  @relation(fields: [studentId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("curriculums")
}

model Publication {
  id                String             @id @default(uuid())
  title             String             @default("Sin t√≠tulo")
  description       String
  benefits          String
  requirements      String
  modality          String
  entryTime         String             @map("entry_time")
  departureTime     String             @map("departure_time")
  remuneration      Decimal?           @default(0)
  imageUrl          String?
  isAvailable       Boolean            @default(true) @map("is_available")
  businessId        String             @map("business_id")

  postulations      Postulation[]
  publicationSkills PublicationSkill[]
  business          Business           @relation(fields: [businessId], references: [id])
  studentBookmarks  StudentBookmarks[]

  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  @@map("publications")
}

model PublicationSkill {
  id            String      @id @default(uuid())
  publicationId String      @map("publication_id")
  skillId       String      @map("skill_id")

  publication   Publication @relation(fields: [publicationId], references: [id])
  skill         Skill       @relation(fields: [skillId], references: [id])

  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([publicationId, skillId])
  @@map("publication_skills")
}

model Forum {
  id          String   @id @default(uuid())
  title       String
  description String
  grade       Int
  studentId   String   @map("student_id")
  businessId  String   @map("business_id")

  business    Business @relation(fields: [businessId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("forums")
}

model  Postulation {
  id            String            @id @default(uuid())
  status        PostulationStatus
  message       String
  urlCV         String?           @map("url_cv")
  studentId     String            @map("student_id")
  publicationId String            @map("publication_id")

  publication   Publication       @relation(fields: [publicationId], references: [id])
  student       Student           @relation(fields: [studentId], references: [id])

  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  @@unique([studentId, publicationId])
  @@map("postulations")
}

model FormContent {
  id             String     @id @default(uuid())
  career         String?
  activitiesData Json?      @map("activities_data")
  businessData   Json?      @map("business_data")
  internshipData Json?      @map("internship_data")
  modality       String?
  scheduleData   Json?      @map("schedule_data")
  signatureData  Json?      @map("signature_data")
  studentData    Json?      @map("student_data")
  subjectsData   Json?      @map("subjects_data")
  studentFormId  String     @map("student_form_id")

  studentForm    StudenForm @relation(fields: [studentFormId], references: [id])

  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  @@map("form_contents")
}

model Subject {
  id              String          @id @default(uuid())
  name            String          @unique
  code            String          @unique
  description     String?

  careersSubjects SubjectCareer[]

  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("subjects")
}

model Career {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String?

  careersSubjects SubjectCareer[]

  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("careers")
}

model SubjectCareer {
  id        String   @id @default(uuid())
  subjectId String   @map("subject_id")
  careerId  String   @map("career_id")
  semester  Int

  career    Career   @relation(fields: [careerId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subject_careers")
}

enum PostulationStatus {
  PENDIENTE
  APROBADO
  RECHAZADO
}
