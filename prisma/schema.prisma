// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id        String @id @default(uuid())
  password  String
  verificationEmailtoken     String? @map("verification_email_token")
  resetPasswordToken         String? @map("reset_password_token")

  user      User?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("auth")
}


model User {
  id        String @id @default(uuid())
  email     String @unique
  name      String
  emailVerified Boolean @default(false) @map("email_verified")

  roles     Role @relation(fields: [roleId], references: [id])
  roleId    String @map("role_id")

  auth      Auth @relation(fields: [authId], references: [id])
  authId    String @unique @map("auth_id")

  student   Student?
  business  Business?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
  
  @@index([email], name: "email_index")
}

model Role {
  id        String @id @default(uuid())
  name      String @unique

  users     User[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("roles")
}

model Student {
  id        String @id @default(uuid())
  shortPresentation String? @map("short_presentation")
  description String?
  faculty   String?
  ira       String?
  imageUrl  String? @map("image_url")

  user      User @relation(fields: [userId], references: [id])
  userId    String @unique @map("user_id")

  studentBookmarks StudentBookmarks[]

  projects Project[]
  contracts Contract[]
  studentForms StudenForm[]
  certifications Certification[]
  curriculums Curriculums[]
  forums Forum[]
  postulations Postulation[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("students")
}

model StudentBookmarks {
  id        String @id @default(uuid())

  student   Student @relation(fields: [studentId], references: [id])
  studentId String @map("student_id")

  publication Publication @relation(fields: [publicationId], references: [id])
  publicationId String @map("publication_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([studentId, publicationId])
  @@map("student_bookmarks")
}

model Business {
  id        String @id @default(uuid())
  name      String
  code      String
  province  String?
  city      String?
  phone     String?
  shortPresentation String? @map("short_presentation")
  description String?
  imageUrl  String? @map("image_url")
  
  hasCovenant     Boolean @map("has_covenant") @default(false)

  user      User @relation(fields: [userId], references: [id])
  userId    String @unique @map("user_id")

  businessCovenants BusinessCovenant?
  publications Publication[]
  forums Forum[]

  contracts Contract[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("businesses")
}

model Covenant {
  id        String @id @default(uuid())
  name      String?
  description String?
  type     String @unique

  businessCovenants BusinessCovenant[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("covenants")
}

// TODO: add fields to store the covenant's data when expired
model BusinessCovenant {
  id        String @id @default(uuid())
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")

  business  Business @relation(fields: [businessId], references: [id])
  businessId String @unique @map("business_id")

  covenant  Covenant @relation(fields: [covenantId], references: [id])
  covenantId String @map("covenant_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("business_covenants")
}

model Contract {
  id        String @id @default(uuid())
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  practiceType String @map("practice_type")
  remuneration Decimal

  business  Business @relation(fields: [businessId], references: [id])
  businessId String @unique @map("business_id")

  student   Student @relation(fields: [studentId], references: [id])
  studentId String @unique @map("student_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contracts")
}


// TODO: add unique constraint to code
model Form {
  id        String @id @default(uuid())
  name      String?
  description String?
  code     String @unique

  studentForms StudenForm[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("forms")
}

model StudenForm {
  id        String @id @default(uuid())
  startDate DateTime @map("start_date")
  approvalDate DateTime? @map("approval_date")
  status   String
  url       String @unique

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @map("student_id")

  form      Form @relation(fields: [formId], references: [id])
  formId    String  @map("form_id")

  formContents FormContent[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("student_forms")
}

model Project {
  id        String @id @default(uuid())
  name      String
  description String?
  url       String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String @map("student_id")

  projectSkills ProjectSkill[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([name, studentId])
  @@map("projects")
}

model Skill {
  id        String @id @default(uuid())
  name      String @unique
  description String?

  projectSkills ProjectSkill[]
  publicationSkills PublicationSkill[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("skills")
}

model ProjectSkill {
  id        String @id @default(uuid())

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @map("project_id")

  skill     Skill @relation(fields: [skillId], references: [id])
  skillId   String @map("skill_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([projectId, skillId])

  @@map("project_skills")
}

model Certification {
  id        String @id @default(uuid())
  name      String
  description String?
  emissionDate DateTime @map("emission_date")
  url      String
  issuingBusiness String @map("issuing_business")

  student Student @relation(fields: [studentId], references: [id])
  studentId String @map("student_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@unique([name, studentId])
  @@map("certifications")
}

model Curriculums {
  id        String @id @default(uuid())
  name      String @unique
  description String?
  url      String

  student Student @relation(fields: [studentId], references: [id])
  studentId String @unique @map("student_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("curriculums")
}

model Publication {
  id        String @id @default(uuid())
  title     String @default("Sin t√≠tulo")
  description String
  modality  String
  entryTime String @map("entry_time")
  departureTime String @map("departure_time")
  benefits  String
  requirements String
  imageUrl       String?
  remuneration Decimal? @default(0)
  isAvailable Boolean @default(true) @map("is_available")

  business  Business @relation(fields: [businessId], references: [id])
  businessId String @map("business_id")
  
  publicationSkills PublicationSkill[]
  studentBookmarks StudentBookmarks[]
  postulations Postulation[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("publications")
}

model PublicationSkill {
  id        String @id @default(uuid())

  publication Publication @relation(fields: [publicationId], references: [id])
  publicationId String @map("publication_id")

  skill     Skill @relation(fields: [skillId], references: [id])
  skillId   String @map("skill_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([publicationId, skillId])

  @@map("publication_skills")
}

model Forum {
  id        String @id @default(uuid())
  title     String
  description String
  grade     Int

  student   Student @relation(fields: [studentId], references: [id])
  studentId String @map("student_id")

  business  Business @relation(fields: [businessId], references: [id])
  businessId String @map("business_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("forums")
}

enum PostulationStatus {
  PENDIENTE
  APROBADO
  RECHAZADO
}

model Postulation {
  id        String @id @default(uuid())
  status    PostulationStatus
  message   String
  urlCV       String? @map("url_cv")

  student   Student @relation(fields: [studentId], references: [id])
  studentId String @map("student_id")

  publication Publication @relation(fields: [publicationId], references: [id])
  publicationId String @map("publication_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([studentId, publicationId])
  @@map("postulations")
}

// Practices Form

model FormContent {
  id        String @id @default(uuid())
  businessData Json 
  studentData Json
  internshipData Json
  subjectsData Json
  scheduleData Json
  activitiesData Json
  signatureData Json

  studentForm      StudenForm @relation(fields: [studentFormId], references: [id])
  studentFormId    String @map("student_form_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("form_contents")
}

model Subject {
  id        String @id @default(uuid())
  name      String @unique
  code      String @unique
  description String?

  careersSubjects SubjectCareer[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subjects")
}

model Career {
  id        String @id @default(uuid())
  name      String @unique
  description String?

  careersSubjects SubjectCareer[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("careers")
}

model SubjectCareer {
  id        String @id @default(uuid())

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String @map("subject_id")

  career    Career @relation(fields: [careerId], references: [id])
  careerId  String @map("career_id")

  semester  Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subject_careers")
}